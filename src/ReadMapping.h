#ifndef READMAPPING_READMAPPING_H
#define READMAPPING_READMAPPING_H

#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <set>

#include "types.h"
#include "algorithms.h"
#include "Cache.h"

class ReadMapping {
public:
    /**
     * Constructor.
     * @param reference_file - The path to the reference file
     * @param reads_file     - The path to the reads file
     * @param logger         - The logger object
     */
    ReadMapping(const std::string &reference_file, const std::string &reads_file, Logger *logger);

    /**
     * Destructor
     */
    ~ReadMapping();

    /**
     * Performs the read mapping
     */
    void do_mapping();

    /**
     * Maps a single read to the reference DNA
     * @param read     - The read sequence
     * @param mappings - The output vector of possible mappings
     * @param padding  - The padding to add to the left when splitting the read
     */
    void map_read(ReadSequence *read, std::vector<Mapping *> &mappings, int padding = 0) const;

    /**
     * Calculates the mutations by majority vote at each position.
     * @param verbose - If true, prints out all mutations
     */
    void calculate_mutations(bool verbose = false);

    /**
     * Outputs the mutations to the given file
     * @param output_file - The path to the output file
     */
    void output_mutations(const std::string &output_file);

    /**
     * Returns the reference DNA
     * @return The reference DNA
     */
    [[nodiscard]] const std::string &get_reference_dna() const;

    /**
     * Returns the reads
     * @return The reads
     */
    [[nodiscard]] const std::vector<ReadPair *> &get_reads() const;

private:
    /* ==================== Private variables ==================== */
    Logger *logger;
    std::string reference_dna;
    std::vector<ReadPair *> reads;
    int average_read_length{};

    // A suffix array cache of the reference DNA
    Cache *cache;

    // Maps position in reference DNA to mutations
    std::map<unsigned int, Mutation *> all_mutations;

    /* ======================= Mapping func ======================= */
    void map_worker(int start, int end);

    /**
     * Maps a read pair to the reference DNA
     * @param read_pair - The read pair to map
     */
    void map_pair(ReadPair *read_pair);

    /**
     * Maps a sequence of substrings to the reference DNA
     * @param sequence   - The vector of integers representing the position of exact matches of each substring
     * @param substrings - The sequence of substrings, generated by splitting the read
     * @param read       - The read sequence
     * @param uncertain  - Output parameter, true if the mapping is uncertain
     * @return           - The best mapping of the read to the reference DNA
     */
    Mapping *match_sequence(
            const std::vector<int> &sequence,
            const std::vector<std::string> &substrings,
            const ReadSequence *read,
            bool &uncertain) const;

    /**
     * Maps a sequence of substrings to the reference DNA, using a more accurate algorithm (slower)
     * @param sequence   - The vector of integers representing the position of exact matches of each substring
     * @param substrings - The sequence of substrings, generated by splitting the read
     * @param read       - The read sequence
     * @return           - The best mapping of the read to the reference DNA
     */
    Mapping *match_sequence_accurate(
            const std::vector<int> &sequence,
            const std::vector<std::string> &substrings,
            const ReadSequence *read) const;

    /**
     * Maps a read to the reference DNA globally.
     * Note: this method should only be used as a last resort, as it is very slow.
     * @param read - The read sequence
     * @return     - The best mapping of the read to the reference DNA
     */
    Mapping *global_match(const ReadSequence *read) const;

    /* =================== Initialization func =================== */
    /**
     * Builds the index hashmap of the reference DNA.
     */
    void build_index();

    /**
     * Reads the reference DNA from the given fileã€‚
     * @param input_file - The path to the reference file
     */
    void read_reference(const std::string &input_file);

    /**
     * Reads the reads from the given file
     * @param input_file - The path to the reads file
     */
    void read_reads(const std::string &input_file);
};


#endif //READMAPPING_READMAPPING_H
